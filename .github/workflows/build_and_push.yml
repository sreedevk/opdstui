name: build opdstui

on:
  push:
    tags: [ 'v*.*.*' ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y gcc git curl xz-utils
        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install gcc git curl xz
        fi

    - name: Install Nim
      run: |
        curl https://nim-lang.org/choosenim/init.sh -sSf | sh -s -- -y
        echo "$HOME/.nimble/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: nimble install -y

    - name: Compile
      run: nim c -d:release --opt:speed -d:ssl --threads:on --out:bin/opdstui src/opdstui.nim

    - name: Rename binary with OS and architecture
      run: |
        mkdir -p release-artifacts
        
        if [ "$RUNNER_OS" = "Linux" ]; then
          ARCH="x86_64"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          if [ "$(uname -m)" = "arm64" ]; then
            ARCH="arm64"
          else
            ARCH="x86_64"
          fi
        fi
        
        cp bin/opdstui "release-artifacts/opdstui-${RUNNER_OS}-${ARCH}"

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: release-artifacts/*
        compression-level: 0
        if-no-files-found: error
        overwrite: true

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          pattern: binaries
          merge-multiple: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            Automated release for ${{ github.ref_name }}
            - Compiled for Linux x86_64 and macOS x86_64
            - Built with Nim ${{ steps.nim_version.outputs.version }}

      - name: Upload Multiple Assets
        run: |
          for file in release-artifacts/*; do
            mime_type=$(file -b --mime-type "$file")
            curl -sSL \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $mime_type" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          done
